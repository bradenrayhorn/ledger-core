// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionAuthenticatorClient is the client API for SessionAuthenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionAuthenticatorClient interface {
	Authenticate(ctx context.Context, in *SessionAuthenticateRequest, opts ...grpc.CallOption) (*SessionAuthenticateResponse, error)
}

type sessionAuthenticatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionAuthenticatorClient(cc grpc.ClientConnInterface) SessionAuthenticatorClient {
	return &sessionAuthenticatorClient{cc}
}

func (c *sessionAuthenticatorClient) Authenticate(ctx context.Context, in *SessionAuthenticateRequest, opts ...grpc.CallOption) (*SessionAuthenticateResponse, error) {
	out := new(SessionAuthenticateResponse)
	err := c.cc.Invoke(ctx, "/session.SessionAuthenticator/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionAuthenticatorServer is the server API for SessionAuthenticator service.
// All implementations must embed UnimplementedSessionAuthenticatorServer
// for forward compatibility
type SessionAuthenticatorServer interface {
	Authenticate(context.Context, *SessionAuthenticateRequest) (*SessionAuthenticateResponse, error)
	mustEmbedUnimplementedSessionAuthenticatorServer()
}

// UnimplementedSessionAuthenticatorServer must be embedded to have forward compatible implementations.
type UnimplementedSessionAuthenticatorServer struct {
}

func (UnimplementedSessionAuthenticatorServer) Authenticate(context.Context, *SessionAuthenticateRequest) (*SessionAuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSessionAuthenticatorServer) mustEmbedUnimplementedSessionAuthenticatorServer() {}

// UnsafeSessionAuthenticatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionAuthenticatorServer will
// result in compilation errors.
type UnsafeSessionAuthenticatorServer interface {
	mustEmbedUnimplementedSessionAuthenticatorServer()
}

func RegisterSessionAuthenticatorServer(s grpc.ServiceRegistrar, srv SessionAuthenticatorServer) {
	s.RegisterService(&SessionAuthenticator_ServiceDesc, srv)
}

func _SessionAuthenticator_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAuthenticatorServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionAuthenticator/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAuthenticatorServer).Authenticate(ctx, req.(*SessionAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionAuthenticator_ServiceDesc is the grpc.ServiceDesc for SessionAuthenticator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionAuthenticator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionAuthenticator",
	HandlerType: (*SessionAuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SessionAuthenticator_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
